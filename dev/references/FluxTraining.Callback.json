{"attributes":{"kind":"abstract type","backlinks":[{"tag":"sourcefile","title":"FluxTraining/src/callbacks/scheduler.jl","docid":"sourcefiles/FluxTraining/src/callbacks/scheduler.jl"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/metrics.jl","docid":"sourcefiles/FluxTraining/src/callbacks/metrics.jl"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/custom.jl","docid":"sourcefiles/FluxTraining/src/callbacks/custom.jl"},{"tag":"documentation","title":"Phase","docid":"references/FluxTraining.Phases.Phase"},{"tag":"document","title":"Callback reference","docid":"documents/docs/callbacks/reference.md"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/recorder.jl","docid":"sourcefiles/FluxTraining/src/callbacks/recorder.jl"},{"tag":"document","title":"How to use callbacks","docid":"documents/docs/callbacks/usage.md"},{"tag":"documentation","title":"CustomCallback","docid":"references/FluxTraining.CustomCallback"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/callbacks.jl","docid":"sourcefiles/FluxTraining/src/callbacks/callbacks.jl"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/logging/logger.jl","docid":"sourcefiles/FluxTraining/src/callbacks/logging/logger.jl"},{"tag":"documentation","title":"on","docid":"references/FluxTraining.on"},{"tag":"sourcefile","title":"FluxTraining/src/callbackutils.jl","docid":"sourcefiles/FluxTraining/src/callbackutils.jl"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/callback.jl","docid":"sourcefiles/FluxTraining/src/callbacks/callback.jl"},{"tag":"sourcefile","title":"FluxTraining/src/learner.jl","docid":"sourcefiles/FluxTraining/src/learner.jl"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/conditional.jl","docid":"sourcefiles/FluxTraining/src/callbacks/conditional.jl"},{"tag":"document","title":"Training loop API reference","docid":"documents/docs/reference/training.md"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/logging/checkpointer.jl","docid":"sourcefiles/FluxTraining/src/callbacks/logging/checkpointer.jl"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/earlystopping.jl","docid":"sourcefiles/FluxTraining/src/callbacks/earlystopping.jl"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/sanitycheck.jl","docid":"sourcefiles/FluxTraining/src/callbacks/sanitycheck.jl"},{"tag":"document","title":"Custom callbacks","docid":"documents/docs/callbacks/custom.md"}],"methods":[],"name":"Callback","title":"Callback","symbol_id":"FluxTraining.Callback","public":false,"module_id":"FluxTraining"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["abstract type Callback\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Supertype of all callbacks. Callbacks add custom functionality to the training loop by hooking into different ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.Events.Event"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Events.Event"],"type":"node"}],"type":"node"},"s"],"type":"node"},{"attributes":{},"tag":"p","children":["Any ",{"attributes":{},"tag":"code","children":["Callback"],"type":"node"}," can be used by passing it to ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.Learner"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Learner"],"type":"node"}],"type":"node"},". See ",{"attributes":{},"tag":"code","children":["subtypes(FluxTraining.Callback)"],"type":"node"}," for implementations."],"type":"node"},{"attributes":{},"tag":"h2","children":["Extending"],"type":"node"},{"attributes":{},"tag":"p","children":["See ",{"attributes":{"reftype":"document","href":"/documents/docs/callbacks/custom.md","title":"","document_id":"documents/docs/callbacks/custom.md"},"tag":"reference","children":["Custom callbacks"],"type":"node"}," for a less succinct tutorial format."],"type":"node"},{"attributes":{},"tag":"ol","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Create a ",{"attributes":{},"tag":"code","children":["struct MyCallback"],"type":"node"}," that subtypes ",{"attributes":{},"tag":"code","children":["FluxTraining.Callback"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Add event handlers by implementing methods for ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.on"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["on"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"code","children":["(event, phase, callback, learner)"],"type":"node"},". Methods should always dispatch on your callback, and may dispatch on specific ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.Phases.Phase"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Phases.Phase"],"type":"node"}],"type":"node"},"s and ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.Events.Event"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Events.Event"],"type":"node"}],"type":"node"},"s."],"type":"node"},{"attributes":{},"tag":"p","children":["For example, to implement an event handler that runs at the end of every step during training: ",{"attributes":{},"tag":"code","children":["on(::StepEnd, ::AbstractTrainingPhase, ::MyCallback, learner)"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["Define what state the callback accesses and/or modifies by implementing ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.stateaccess"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["stateaccess"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"code","children":["(::MyCallback)"],"type":"node"},". While ",{"attributes":{},"tag":"code","children":["learner"],"type":"node"}," is always passed as an argument to ",{"attributes":{},"tag":"code","children":["on"],"type":"node"}," event handlers, by default a callback can not read or write to its fields. See ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.stateaccess"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["stateaccess"],"type":"node"}],"type":"node"}," for more detail."],"type":"node"},{"attributes":{},"tag":"p","children":["If a callback needs to write some state that other callbacks should be able to access, it can store it in ",{"attributes":{},"tag":"code","children":["learner.cbstate"],"type":"node"}," if you add a permission in ",{"attributes":{},"tag":"code","children":["stateaccess"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["If the callback needs some one-time initialization, you can implement ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.init!"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["init!"],"type":"node"}],"type":"node"}," which will be run at least once before any step is run."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}