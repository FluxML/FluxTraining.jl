{"attributes":{"backlinks":[],"path":"/home/runner/.julia/packages/FluxTraining/xSqvU/docs/imagenette_demo.ipynb","title":"imagenette_demo"},"tag":"document","children":[{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"using DataLoaders\nusing Flux\nusing DataAugmentation\nusing DeepLearningTasks\nusing DLDatasets\nusing MLDataPattern\nusing LearnBase\nusing ProgressBars\nusing FluxTraining\nusing FluxModels"}}]}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"task = ImageClassification(10, sz = (224, 224))\nlabeltoint = metadata(ImageNette).labeltoclass\nobsfn((image, label)) = (image, labeltoint[label])"}}]}]},{"mimes":{"text/plain":""}},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"obsfn (generic function with 1 method)"}}]}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"trainds, valds = DLDatasets.loaddataset(ImageNette, \"v2_160px\", split = (\"train\", \"val\"))\nbs = 64\ntraindl = taskdataloader(task, trainds, bs; obsfn)\nvaldl = taskdataloader(task, valds, 2bs; obsfn);"}}]}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"model = gpu(Chain(xresnet18(), FluxModels.classificationhead(task.nclasses, 512)));"}}]}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"learner = Learner(\n    model,\n    (traindl, valdl),\n    ADAM(),\n    Flux.Losses.logitcrossentropy,\n    callbacks = [ToGPU()],\n    metrics = [Metric(accuracy)],\n    schedule = Schedules(onecycleschedule(10 * length(traindl), 0.01))\n);"}}]}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"FluxTraining.fit!(learner, 10)"}}]}]},{"attributes":{"class":"codeoutput"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"\u001b[32mEpoch 1 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:02\u001b[39m\nloss: 1.3166474935148849\naccuracy: 0.5757865646258504\n\u001b[32mEpoch 2 ValidationPhase(): 100%|████████████████████████| Time: 0:00:13\u001b[39m\nloss: 1.9421841899553935\naccuracy: 0.471875\n\u001b[32mEpoch 2 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:05\u001b[39m\nloss: 1.001848922700298\naccuracy: 0.678146258503401\n\u001b[32mEpoch 3 ValidationPhase(): 100%|████████████████████████| Time: 0:00:13\u001b[39m\nloss: 1.044497122367223\naccuracy: 0.6622395833333337\n\u001b[32mEpoch 3 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:06\u001b[39m\nloss: 0.8365915733940748\naccuracy: 0.7292729591836736\n\u001b[32mEpoch 4 ValidationPhase(): 100%|████████████████████████| Time: 0:00:13\u001b[39m\nloss: 0.9936108271280925\naccuracy: 0.6783854166666666\n\u001b[32mEpoch 4 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:04\u001b[39m\nloss: 0.7450118934621617\naccuracy: 0.7589285714285718\n\u001b[32mEpoch 5 ValidationPhase(): 100%|████████████████████████| Time: 0:00:13\u001b[39m\nloss: 1.0524701436360677\naccuracy: 0.6640625000000001\n\u001b[32mEpoch 5 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:05\u001b[39m\nloss: 0.6489803444366066\naccuracy: 0.7909226190476191\n\u001b[32mEpoch 6 ValidationPhase(): 100%|████████████████████████| Time: 0:00:12\u001b[39m\nloss: 0.8496215959390004\naccuracy: 0.7190104166666665\n\u001b[32mEpoch 6 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:06\u001b[39m\nloss: 0.5658585832637995\naccuracy: 0.8167517006802718\n\u001b[32mEpoch 7 ValidationPhase(): 100%|████████████████████████| Time: 0:00:13\u001b[39m\nloss: 0.7595664302508036\naccuracy: 0.7575520833333333\n\u001b[32mEpoch 7 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:05\u001b[39m\nloss: 0.5101636230540113\naccuracy: 0.8338647959183668\n\u001b[32mEpoch 8 ValidationPhase(): 100%|████████████████████████| Time: 0:00:12\u001b[39m\nloss: 0.8600163320700328\naccuracy: 0.7414062499999998\n\u001b[32mEpoch 8 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:05\u001b[39m\nloss: 0.45264889228911626\naccuracy: 0.8527848639455782\n\u001b[32mEpoch 9 ValidationPhase(): 100%|████████████████████████| Time: 0:00:13\u001b[39m\nloss: 0.8109628856182098\naccuracy: 0.753125\n\u001b[32mEpoch 9 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:05\u001b[39m\nloss: 0.40744140095451253\naccuracy: 0.8603316326530616\n\u001b[32mEpoch 10 ValidationPhase(): 100%|███████████████████████| Time: 0:00:12\u001b[39m\nloss: 0.6673034459352494\naccuracy: 0.7921874999999999\n\u001b[32mEpoch 10 TrainingPhase(): 100%|█████████████████████████| Time: 0:01:04\u001b[39m\nloss: 0.3401108379063963\naccuracy: 0.885841836734694\n\u001b[32mEpoch 11 ValidationPhase(): 100%|███████████████████████| Time: 0:00:12\u001b[39m\nloss: 0.7720626552899679\naccuracy: 0.7669270833333333\n"}}]}]},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Learner\n  model: Chain{Tuple{Chain{Tuple{Chain{Tuple{Conv{2,4,typeof(identity),CUDA.CuArray{Float32,4},CUDA.CuArray{Float32,1}},BatchNorm{typeof(relu),CUDA.CuArray{Float32,1},CUDA.CuArray{Float32,1},Float32}}},Chain{Tuple{Conv{2,4,typeof(identity),CUDA.CuArray{Float32,4},CUDA.CuArray{Float32,1}},BatchNorm{typeof(relu),CUDA.CuArray{Float32,1},CUDA.CuArray{Float32,1},Float32}}},Chain{Tuple{Conv{2,4,typeof(identity),CUDA.CuArray{Float32,4},CUDA.CuArray{Float32,1}},BatchNorm{typeof(relu),CUDA.CuArray{Float32,1},CUDA.CuArray{Float32,1},Float32}}},MaxPool{2,4},Chain{Tuple{FluxModels.ResBlock,FluxModels.ResBlock}},Chain{Tuple{FluxModels.ResBlock,FluxModels.ResBlock}},Chain{Tuple{FluxModels.ResBlock,FluxModels.ResBlock}},Chain{Tuple{FluxModels.ResBlock,FluxModels.ResBlock}}}},Chain{Tuple{FluxModels.AdaptiveMeanPool{2},typeof(FluxModels.flatten),Dense{typeof(identity),CUDA.CuArray{Float32,2},CUDA.CuArray{Float32,1}}}}}}\n  data: Tuple{DataLoaders.BufferGetObsParallel{Tuple{Array{Float32,4},Array{Float32,2}},DataLoaders.BatchViewCollated{DeepLearningTasks.MappedData}},DataLoaders.BufferGetObsParallel{Tuple{Array{Float32,4},Array{Float32,2}},DataLoaders.BatchViewCollated{DeepLearningTasks.MappedData}}}\n  opt: ADAM\n  lossfn: logitcrossentropy (function of type typeof(Flux.Losses.logitcrossentropy))\n  params: Zygote.Params\n  batch: FluxTraining.BatchState\n  callbacks: FluxTraining.Callbacks\n  cbstate: Dict{Symbol,Any}\n"}}]}]}]}