{"attributes":{"kind":"function","backlinks":[{"tag":"document","title":"News","docid":"documents/CHANGELOG.md"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/custom.jl","docid":"sourcefiles/FluxTraining/src/callbacks/custom.jl"},{"tag":"documentation","title":"Phase","docid":"references/FluxTraining.Phases.Phase"},{"tag":"sourcefile","title":"FluxTraining/src/training.jl","docid":"sourcefiles/FluxTraining/src/training.jl"},{"tag":"sourcefile","title":"FluxTraining/src/FluxTraining.jl","docid":"sourcefiles/FluxTraining/src/FluxTraining.jl"},{"tag":"sourcefile","title":"FluxTraining/src/callbacks/conditional.jl","docid":"sourcefiles/FluxTraining/src/callbacks/conditional.jl"},{"tag":"document","title":"Training loop API reference","docid":"documents/docs/reference/training.md"},{"tag":"documentation","title":"Learner","docid":"references/FluxTraining.Learner"},{"tag":"document","title":"Training loop","docid":"documents/docs/tutorials/training.md"}],"methods":[{"line":21,"file":"/home/runner/.julia/packages/FluxTraining/KmMoR/src/training.jl","method_id":"FluxTraining.epoch!_1","symbol_id":"FluxTraining.epoch!","signature":"epoch!(learner, phase::FluxTraining.Phases.Phase)"},{"line":21,"file":"/home/runner/.julia/packages/FluxTraining/KmMoR/src/training.jl","method_id":"FluxTraining.epoch!_2","symbol_id":"FluxTraining.epoch!","signature":"epoch!(learner, phase::FluxTraining.Phases.Phase, dataiter)"}],"name":"epoch!","title":"epoch!","symbol_id":"FluxTraining.epoch!","public":true,"module_id":"FluxTraining"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["epoch!(learner, phase[, dataiter])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Train ",{"attributes":{},"tag":"code","children":["learner"],"type":"node"}," for one epoch on ",{"attributes":{},"tag":"code","children":["dataiter"],"type":"node"},". Iterates through",{"attributes":{},"tag":"br","children":[],"type":"node"},{"attributes":{},"tag":"code","children":["dataiter"],"type":"node"}," and ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.step!"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["step!"],"type":"node"}],"type":"node"},"s for each batch/item."],"type":"node"},{"attributes":{},"tag":"p","children":["If no data iterator is passed in, use ",{"attributes":{},"tag":"code","children":["learner.data[phasedataiter(phase)]"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h2","children":["Extending"],"type":"node"},{"attributes":{},"tag":"p","children":["The default implementation iterates over every batch in ",{"attributes":{},"tag":"code","children":["dataiter"],"type":"node"},{"attributes":{},"tag":"br","children":[],"type":"node"},"and calls ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.step!"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["step!"],"type":"node"}],"type":"node"}," for each. This behavior can be overloaded",{"attributes":{},"tag":"br","children":[],"type":"node"},"by implementing ",{"attributes":{},"tag":"code","children":["epoch!(learner, ::MyPhase, dataiter)"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["If youâ€™re implementing a custom ",{"attributes":{},"tag":"code","children":["epoch!"],"type":"node"}," method, it is recommended",{"attributes":{},"tag":"br","children":[],"type":"node"},"you make use of ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.runepoch"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["runepoch"],"type":"node"}],"type":"node"}," to get begin and end events as well",{"attributes":{},"tag":"br","children":[],"type":"node"},"as proper handling of ",{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.CancelEpochException"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["CancelEpochException"],"type":"node"}],"type":"node"},"s."],"type":"node"},{"attributes":{},"tag":"p","children":["See the default implementation for reference."],"type":"node"}],"type":"node"}],"type":"node"}